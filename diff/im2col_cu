diff --git a/src/caffe/util/im2col.cu b/src/caffe/util/im2col.cu
index c90f93e..9a11029 100644
--- a/src/caffe/util/im2col.cu
+++ b/src/caffe/util/im2col.cu
@@ -14,7 +14,7 @@ __global__ void im2col_gpu_kernel(const int n, const Dtype* data_im,
     const int pad_h, const int pad_w,
     const int stride_h, const int stride_w,
     const int height_col, const int width_col,
-    Dtype* data_col) {
+    Dtype* data_col, const int kstride_h = 1, const int kstride_w = 1) {
   CUDA_KERNEL_LOOP(index, n) {
     int w_out = index % width_col;
     int h_index = index / width_col;
@@ -27,12 +27,12 @@ __global__ void im2col_gpu_kernel(const int n, const Dtype* data_im,
     data_col_ptr += (channel_out * height_col + h_out) * width_col + w_out;
     const Dtype* data_im_ptr = data_im;
     data_im_ptr += (channel_in * height + h_in) * width + w_in;
-    for (int i = 0; i < kernel_h; ++i) {
-      for (int j = 0; j < kernel_w; ++j) {
-        int h = h_in + i;
-        int w = w_in + j;
+    for (int i = 0; i < kernel_h; i++) {
+      for (int j = 0; j < kernel_w; j++) {
+        int h = h_in + i * kstride_h;
+        int w = w_in + j * kstride_w;
         *data_col_ptr = (h >= 0 && w >= 0 && h < height && w < width) ?
-            data_im_ptr[i * width + j] : 0;
+            data_im_ptr[i * kstride_h * width + j*kstride_w] : 0;
         data_col_ptr += height_col * width_col;
       }
     }
@@ -44,18 +44,21 @@ void im2col_gpu(const Dtype* data_im, const int channels,
     const int height, const int width, const int kernel_h, const int kernel_w,
     const int pad_h, const int pad_w,
     const int stride_h, const int stride_w,
-    Dtype* data_col) {
+    Dtype* data_col, const int kstride_h, const int kstride_w) {
   // We are going to launch channels * height_col * width_col kernels, each
   // kernel responsible for copying a single-channel grid.
-  int height_col = (height + 2 * pad_h - kernel_h) / stride_h + 1;
-  int width_col = (width + 2 * pad_w - kernel_w) / stride_w + 1;
+  int ext_kernel_h = (kernel_h - 1) * kstride_h + 1;
+  int ext_kernel_w = (kernel_w - 1) * kstride_w + 1;
+  int height_col = (height + 2 * pad_h - ext_kernel_h) / stride_h + 1;
+  int width_col = (width + 2 * pad_w - ext_kernel_w) / stride_w + 1;
+
   int num_kernels = channels * height_col * width_col;
   // NOLINT_NEXT_LINE(whitespace/operators)
   im2col_gpu_kernel<Dtype><<<CAFFE_GET_BLOCKS(num_kernels),
                              CAFFE_CUDA_NUM_THREADS>>>(
       num_kernels, data_im, height, width, kernel_h, kernel_w, pad_h,
       pad_w, stride_h, stride_w, height_col,
-      width_col, data_col);
+      width_col, data_col, kstride_h, kstride_w);
   CUDA_POST_KERNEL_CHECK;
 }
 
@@ -64,11 +67,11 @@ void im2col_gpu(const Dtype* data_im, const int channels,
 template void im2col_gpu<float>(const float* data_im, const int channels,
     const int height, const int width, const int kernel_h, const int kernel_w,
     const int pad_h, const int pad_w, const int stride_h, const int stride_w,
-    float* data_col);
+    float* data_col, const int kstride_h, const int kstride_w);
 template void im2col_gpu<double>(const double* data_im, const int channels,
     const int height, const int width, const int kernel_h, const int kernel_w,
     const int pad_h, const int pad_w, const int stride_h, const int stride_w,
-    double* data_col);
+    double* data_col, const int kstride_h, const int kstride_w);
 
 template <typename Dtype>
 __global__ void col2im_gpu_kernel(const int n, const Dtype* data_col,
